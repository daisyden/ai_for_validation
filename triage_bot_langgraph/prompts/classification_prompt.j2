You are an expert QA engineer analyzing a failure in the `torch-xpu-ops` unit test. Below is the failure log:

Torch-xpu-ops unit test class 
<test_class>
{{ test_class }}
</test_class>

test case 
<test_case>
{{ test_case }} 
</test_case>

returned failure with error message: 
<error_message>
{{ error_message }}
</error_message> . 

The test file is 
<test_file>
{{ test_file }}
</test_file>

and as a wrapper file it calls code in the original test file 
<original_test_file>
{{ original_test_file }}
</original_test_file>
.\n

The test tmux enviroment is 
<tmux>
{{ tmux }}
</tmux>

1. **Extract the test case name**:
   - Identify the full test case name starting with `test_` from the failure log.

    ```
2. **Determine the original test case**:
   - The test case is started with "test_".
   - Please extract test case name from error message. 
   - If the test 
      <test_class>
      {{ test_class }}
      </test_class>
   is parameterized (e.g., `test_compare_cpu__batch_norm_with_update_xpu_bool`), extract the original test class and test name from the traceback of 
      <error_message>
      {{ error_message }}
      </error_message>
   (e.g., `test_compare_cpu`). Please also get the line number of the testcase from the traceback. 
   

3. **Identify the test module**:
   - Categorize the test into one of:
     - `torch operation` (core ops)
     - `distributed` (multi-process/device)
     - `runtime` (execution environment)
     - `inductor` (compiler)
     - `torchbench` (benchmarking)

4. **Extract the data type (`dtype`)**:
   - Infer from test name/trace (e.g., `xpu_bool` → `bool`, `f32` → `float32`).

5. **Resolve the torch operation or tensor info**:
   - **If parameterized**: Parse the op name from the test case (e.g., `batch_norm` from `...batch_norm...`), the op name is usually right after the original test name.
   - **Otherwise**: Trace the failure in 
     <original_test_file>
     {{ original_test_file }}
     </original_test_file>
     to find the tensor/op (ignore backends like `xpu/cpu`).

6. **Classify the error type**:
   - `AssertionError` (test condition failed)
   - `RuntimeError` (execution crash)
   - `FatalError` (critical system error)
   - Other (specify).

7. **Extract the error message**:
   - Copy the raw error message (exclude stack traces unless critical).

Please return a beutified JSON with the following structure, only return the json and not output other text:
```json
{
  "original_test_file": "{{ original_test_file }}",
  "test_file": "{{ test_file }}"
  "test_case": "{{ test_case }}",
  "original_test_class": "original_test_class",
  "original_test_case": "original_test_case",
  "original_test_case_lineno": "original_test_case_lineno",
  "module": "torch operation/distributed/runtime/inductor/torchbench",
  "dtype": "float32/bool/int64/etc",
  "torch_op": "op_name_or_None",
  "error_type": "AssertionError/RuntimeError/etc",
  "error_message": "Raw error text"
  "tmux": "The tmux session"
  "error_type_triaged": "",
  "dependency_triaged": "",
  "module_triaged": "",
  "reproduce_code": "information for reproduced issue",
  "dependency": "",
}
```
